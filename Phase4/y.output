Grammar

    0 $accept: prog_start $end

    1 prog_start: %empty
    2           | functions

    3 functions: function
    4          | function functions

    5 function: FUNCTION IDENTIFIER L_PAREN arguments R_PAREN L_CURLY statements R_CURLY

    6 arguments: argument
    7          | argument COMMA arguments

    8 argument: %empty
    9         | INTEGER IDENTIFIER

   10 statements: %empty
   11           | statement SEMICOLON statements
   12           | statement_p statements

   13 statement_p: s_if
   14            | s_while

   15 statement: declaration
   16          | s_var
   17          | READ L_PAREN var R_PAREN
   18          | WRITE L_PAREN expression R_PAREN
   19          | arr_decl
   20          | arr_assn
   21          | RETURN expression

   22 arr_decl: INTEGER IDENTIFIER L_BRACKET NUMBER R_BRACKET

   23 arr_assn: IDENTIFIER L_BRACKET NUMBER R_BRACKET EQUALS expression

   24 s_var: var EQUALS expression

   25 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY
   26     | IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY IFELSE neg L_CURLY statements R_CURLY
   27     | IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY ELSE L_CURLY statements R_CURLY

   28 s_while: WHILELOOP L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY

   29 expression: expression addop term
   30           | term

   31 addop: PLUS
   32      | MINUS

   33 term: term mulop factor
   34     | factor

   35 mulop: MULT
   36      | DIV
   37      | MOD

   38 factor: func L_PAREN expression R_PAREN
   39       | NUMBER
   40       | var
   41       | NUMBER DECIMAL NUMBER
   42       | arr_access

   43 arr_access: IDENTIFIER L_BRACKET NUMBER R_BRACKET

   44 func: %empty
   45     | IDENTIFIER

   46 expression_bool: expression_bool ne_comp term_bool
   47                | term_bool

   48 ne_comp: ISNOTEQUAL
   49        | LESSTHAN
   50        | GREATERTHAN

   51 term_bool: term_bool e_comp factor_bool
   52          | factor_bool

   53 e_comp: ISEQUAL
   54       | LTEQUAL
   55       | GTEQUAL

   56 factor_bool: factor_bool L_PAREN expression R_PAREN
   57            | NUMBER
   58            | var

   59 var: IDENTIFIER

   60 neg: NOT
   61    | %empty

   62 declaration: INTEGER IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
error (256)
PLUS (258) 31
MINUS (259) 32
MULT (260) 35
MOD (261) 37
DIV (262) 36
EQUALS (263) 23 24
LESSTHAN (264) 49
GREATERTHAN (265) 50
ISEQUAL (266) 53
ISNOTEQUAL (267) 48
GTEQUAL (268) 55
LTEQUAL (269) 54
NOT (270) 60
SEMICOLON (271) 11
L_PAREN (272) 5 17 18 25 26 27 28 38 56
R_PAREN (273) 5 17 18 25 26 27 28 38 56
L_CURLY (274) 5 25 26 27 28
R_CURLY (275) 5 25 26 27 28
L_BRACKET (276) 22 23 43
R_BRACKET (277) 22 23 43
COMMA (278) 7
DECIMAL (279) 41
READ (280) 17
WRITE (281) 18
IF (282) 25 26 27
IFELSE (283) 26
ELSE (284) 27
WHILELOOP (285) 28
INTEGER (286) 9 22 62
FUNCTION (287) 5
RETURN (288) 21
IDENTIFIER (289) 5 9 22 23 43 45 59 62
NUMBER (290) 22 23 39 41 43 57


Nonterminals, with rules where they appear

$accept (36)
    on left: 0
prog_start (37)
    on left: 1 2, on right: 0
functions (38)
    on left: 3 4, on right: 2 4
function (39)
    on left: 5, on right: 3 4
arguments (40)
    on left: 6 7, on right: 5 7
argument (41)
    on left: 8 9, on right: 6 7
statements (42)
    on left: 10 11 12, on right: 5 11 12 25 26 27 28
statement_p (43)
    on left: 13 14, on right: 12
statement (44)
    on left: 15 16 17 18 19 20 21, on right: 11
arr_decl (45)
    on left: 22, on right: 19
arr_assn (46)
    on left: 23, on right: 20
s_var (47)
    on left: 24, on right: 16
s_if (48)
    on left: 25 26 27, on right: 13
s_while (49)
    on left: 28, on right: 14
expression (50)
    on left: 29 30, on right: 18 21 23 24 29 38 56
addop (51)
    on left: 31 32, on right: 29
term (52)
    on left: 33 34, on right: 29 30 33
mulop (53)
    on left: 35 36 37, on right: 33
factor (54)
    on left: 38 39 40 41 42, on right: 33 34
arr_access (55)
    on left: 43, on right: 42
func (56)
    on left: 44 45, on right: 38
expression_bool (57)
    on left: 46 47, on right: 25 26 27 28 46
ne_comp (58)
    on left: 48 49 50, on right: 46
term_bool (59)
    on left: 51 52, on right: 46 47 51
e_comp (60)
    on left: 53 54 55, on right: 51
factor_bool (61)
    on left: 56 57 58, on right: 51 52 56
var (62)
    on left: 59, on right: 17 24 40 58
neg (63)
    on left: 60 61, on right: 25 26 27 28
declaration (64)
    on left: 62, on right: 15


State 0

    0 $accept: . prog_start $end

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 1 (prog_start)

    prog_start  go to state 2
    functions   go to state 3
    function    go to state 4


State 1

    5 function: FUNCTION . IDENTIFIER L_PAREN arguments R_PAREN L_CURLY statements R_CURLY

    IDENTIFIER  shift, and go to state 5


State 2

    0 $accept: prog_start . $end

    $end  shift, and go to state 6


State 3

    2 prog_start: functions .

    $default  reduce using rule 2 (prog_start)


State 4

    3 functions: function .
    4          | function . functions

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 3 (functions)

    functions  go to state 7
    function   go to state 4


State 5

    5 function: FUNCTION IDENTIFIER . L_PAREN arguments R_PAREN L_CURLY statements R_CURLY

    L_PAREN  shift, and go to state 8


State 6

    0 $accept: prog_start $end .

    $default  accept


State 7

    4 functions: function functions .

    $default  reduce using rule 4 (functions)


State 8

    5 function: FUNCTION IDENTIFIER L_PAREN . arguments R_PAREN L_CURLY statements R_CURLY

    INTEGER  shift, and go to state 9

    $default  reduce using rule 8 (argument)

    arguments  go to state 10
    argument   go to state 11


State 9

    9 argument: INTEGER . IDENTIFIER

    IDENTIFIER  shift, and go to state 12


State 10

    5 function: FUNCTION IDENTIFIER L_PAREN arguments . R_PAREN L_CURLY statements R_CURLY

    R_PAREN  shift, and go to state 13


State 11

    6 arguments: argument .
    7          | argument . COMMA arguments

    COMMA  shift, and go to state 14

    $default  reduce using rule 6 (arguments)


State 12

    9 argument: INTEGER IDENTIFIER .

    $default  reduce using rule 9 (argument)


State 13

    5 function: FUNCTION IDENTIFIER L_PAREN arguments R_PAREN . L_CURLY statements R_CURLY

    L_CURLY  shift, and go to state 15


State 14

    7 arguments: argument COMMA . arguments

    INTEGER  shift, and go to state 9

    $default  reduce using rule 8 (argument)

    arguments  go to state 16
    argument   go to state 11


State 15

    5 function: FUNCTION IDENTIFIER L_PAREN arguments R_PAREN L_CURLY . statements R_CURLY

    READ        shift, and go to state 17
    WRITE       shift, and go to state 18
    IF          shift, and go to state 19
    WHILELOOP   shift, and go to state 20
    INTEGER     shift, and go to state 21
    RETURN      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23

    $default  reduce using rule 10 (statements)

    statements   go to state 24
    statement_p  go to state 25
    statement    go to state 26
    arr_decl     go to state 27
    arr_assn     go to state 28
    s_var        go to state 29
    s_if         go to state 30
    s_while      go to state 31
    var          go to state 32
    declaration  go to state 33


State 16

    7 arguments: argument COMMA arguments .

    $default  reduce using rule 7 (arguments)


State 17

   17 statement: READ . L_PAREN var R_PAREN

    L_PAREN  shift, and go to state 34


State 18

   18 statement: WRITE . L_PAREN expression R_PAREN

    L_PAREN  shift, and go to state 35


State 19

   25 s_if: IF . L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY
   26     | IF . L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY IFELSE neg L_CURLY statements R_CURLY
   27     | IF . L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY ELSE L_CURLY statements R_CURLY

    L_PAREN  shift, and go to state 36


State 20

   28 s_while: WHILELOOP . L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY

    L_PAREN  shift, and go to state 37


State 21

   22 arr_decl: INTEGER . IDENTIFIER L_BRACKET NUMBER R_BRACKET
   62 declaration: INTEGER . IDENTIFIER

    IDENTIFIER  shift, and go to state 38


State 22

   21 statement: RETURN . expression

    IDENTIFIER  shift, and go to state 39
    NUMBER      shift, and go to state 40

    $default  reduce using rule 44 (func)

    expression  go to state 41
    term        go to state 42
    factor      go to state 43
    arr_access  go to state 44
    func        go to state 45
    var         go to state 46


State 23

   23 arr_assn: IDENTIFIER . L_BRACKET NUMBER R_BRACKET EQUALS expression
   59 var: IDENTIFIER .

    L_BRACKET  shift, and go to state 47

    $default  reduce using rule 59 (var)


State 24

    5 function: FUNCTION IDENTIFIER L_PAREN arguments R_PAREN L_CURLY statements . R_CURLY

    R_CURLY  shift, and go to state 48


State 25

   12 statements: statement_p . statements

    READ        shift, and go to state 17
    WRITE       shift, and go to state 18
    IF          shift, and go to state 19
    WHILELOOP   shift, and go to state 20
    INTEGER     shift, and go to state 21
    RETURN      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23

    $default  reduce using rule 10 (statements)

    statements   go to state 49
    statement_p  go to state 25
    statement    go to state 26
    arr_decl     go to state 27
    arr_assn     go to state 28
    s_var        go to state 29
    s_if         go to state 30
    s_while      go to state 31
    var          go to state 32
    declaration  go to state 33


State 26

   11 statements: statement . SEMICOLON statements

    SEMICOLON  shift, and go to state 50


State 27

   19 statement: arr_decl .

    $default  reduce using rule 19 (statement)


State 28

   20 statement: arr_assn .

    $default  reduce using rule 20 (statement)


State 29

   16 statement: s_var .

    $default  reduce using rule 16 (statement)


State 30

   13 statement_p: s_if .

    $default  reduce using rule 13 (statement_p)


State 31

   14 statement_p: s_while .

    $default  reduce using rule 14 (statement_p)


State 32

   24 s_var: var . EQUALS expression

    EQUALS  shift, and go to state 51


State 33

   15 statement: declaration .

    $default  reduce using rule 15 (statement)


State 34

   17 statement: READ L_PAREN . var R_PAREN

    IDENTIFIER  shift, and go to state 52

    var  go to state 53


State 35

   18 statement: WRITE L_PAREN . expression R_PAREN

    IDENTIFIER  shift, and go to state 39
    NUMBER      shift, and go to state 40

    $default  reduce using rule 44 (func)

    expression  go to state 54
    term        go to state 42
    factor      go to state 43
    arr_access  go to state 44
    func        go to state 45
    var         go to state 46


State 36

   25 s_if: IF L_PAREN . neg expression_bool R_PAREN L_CURLY statements R_CURLY
   26     | IF L_PAREN . neg expression_bool R_PAREN L_CURLY statements R_CURLY IFELSE neg L_CURLY statements R_CURLY
   27     | IF L_PAREN . neg expression_bool R_PAREN L_CURLY statements R_CURLY ELSE L_CURLY statements R_CURLY

    NOT  shift, and go to state 55

    $default  reduce using rule 61 (neg)

    neg  go to state 56


State 37

   28 s_while: WHILELOOP L_PAREN . neg expression_bool R_PAREN L_CURLY statements R_CURLY

    NOT  shift, and go to state 55

    $default  reduce using rule 61 (neg)

    neg  go to state 57


State 38

   22 arr_decl: INTEGER IDENTIFIER . L_BRACKET NUMBER R_BRACKET
   62 declaration: INTEGER IDENTIFIER .

    L_BRACKET  shift, and go to state 58

    $default  reduce using rule 62 (declaration)


State 39

   43 arr_access: IDENTIFIER . L_BRACKET NUMBER R_BRACKET
   45 func: IDENTIFIER .
   59 var: IDENTIFIER .

    L_BRACKET  shift, and go to state 59

    L_PAREN   reduce using rule 45 (func)
    $default  reduce using rule 59 (var)


State 40

   39 factor: NUMBER .
   41       | NUMBER . DECIMAL NUMBER

    DECIMAL  shift, and go to state 60

    $default  reduce using rule 39 (factor)


State 41

   21 statement: RETURN expression .
   29 expression: expression . addop term

    PLUS   shift, and go to state 61
    MINUS  shift, and go to state 62

    $default  reduce using rule 21 (statement)

    addop  go to state 63


State 42

   30 expression: term .
   33 term: term . mulop factor

    MULT  shift, and go to state 64
    MOD   shift, and go to state 65
    DIV   shift, and go to state 66

    $default  reduce using rule 30 (expression)

    mulop  go to state 67


State 43

   34 term: factor .

    $default  reduce using rule 34 (term)


State 44

   42 factor: arr_access .

    $default  reduce using rule 42 (factor)


State 45

   38 factor: func . L_PAREN expression R_PAREN

    L_PAREN  shift, and go to state 68


State 46

   40 factor: var .

    $default  reduce using rule 40 (factor)


State 47

   23 arr_assn: IDENTIFIER L_BRACKET . NUMBER R_BRACKET EQUALS expression

    NUMBER  shift, and go to state 69


State 48

    5 function: FUNCTION IDENTIFIER L_PAREN arguments R_PAREN L_CURLY statements R_CURLY .

    $default  reduce using rule 5 (function)


State 49

   12 statements: statement_p statements .

    $default  reduce using rule 12 (statements)


State 50

   11 statements: statement SEMICOLON . statements

    READ        shift, and go to state 17
    WRITE       shift, and go to state 18
    IF          shift, and go to state 19
    WHILELOOP   shift, and go to state 20
    INTEGER     shift, and go to state 21
    RETURN      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23

    $default  reduce using rule 10 (statements)

    statements   go to state 70
    statement_p  go to state 25
    statement    go to state 26
    arr_decl     go to state 27
    arr_assn     go to state 28
    s_var        go to state 29
    s_if         go to state 30
    s_while      go to state 31
    var          go to state 32
    declaration  go to state 33


State 51

   24 s_var: var EQUALS . expression

    IDENTIFIER  shift, and go to state 39
    NUMBER      shift, and go to state 40

    $default  reduce using rule 44 (func)

    expression  go to state 71
    term        go to state 42
    factor      go to state 43
    arr_access  go to state 44
    func        go to state 45
    var         go to state 46


State 52

   59 var: IDENTIFIER .

    $default  reduce using rule 59 (var)


State 53

   17 statement: READ L_PAREN var . R_PAREN

    R_PAREN  shift, and go to state 72


State 54

   18 statement: WRITE L_PAREN expression . R_PAREN
   29 expression: expression . addop term

    PLUS     shift, and go to state 61
    MINUS    shift, and go to state 62
    R_PAREN  shift, and go to state 73

    addop  go to state 63


State 55

   60 neg: NOT .

    $default  reduce using rule 60 (neg)


State 56

   25 s_if: IF L_PAREN neg . expression_bool R_PAREN L_CURLY statements R_CURLY
   26     | IF L_PAREN neg . expression_bool R_PAREN L_CURLY statements R_CURLY IFELSE neg L_CURLY statements R_CURLY
   27     | IF L_PAREN neg . expression_bool R_PAREN L_CURLY statements R_CURLY ELSE L_CURLY statements R_CURLY

    IDENTIFIER  shift, and go to state 52
    NUMBER      shift, and go to state 74

    expression_bool  go to state 75
    term_bool        go to state 76
    factor_bool      go to state 77
    var              go to state 78


State 57

   28 s_while: WHILELOOP L_PAREN neg . expression_bool R_PAREN L_CURLY statements R_CURLY

    IDENTIFIER  shift, and go to state 52
    NUMBER      shift, and go to state 74

    expression_bool  go to state 79
    term_bool        go to state 76
    factor_bool      go to state 77
    var              go to state 78


State 58

   22 arr_decl: INTEGER IDENTIFIER L_BRACKET . NUMBER R_BRACKET

    NUMBER  shift, and go to state 80


State 59

   43 arr_access: IDENTIFIER L_BRACKET . NUMBER R_BRACKET

    NUMBER  shift, and go to state 81


State 60

   41 factor: NUMBER DECIMAL . NUMBER

    NUMBER  shift, and go to state 82


State 61

   31 addop: PLUS .

    $default  reduce using rule 31 (addop)


State 62

   32 addop: MINUS .

    $default  reduce using rule 32 (addop)


State 63

   29 expression: expression addop . term

    IDENTIFIER  shift, and go to state 39
    NUMBER      shift, and go to state 40

    $default  reduce using rule 44 (func)

    term        go to state 83
    factor      go to state 43
    arr_access  go to state 44
    func        go to state 45
    var         go to state 46


State 64

   35 mulop: MULT .

    $default  reduce using rule 35 (mulop)


State 65

   37 mulop: MOD .

    $default  reduce using rule 37 (mulop)


State 66

   36 mulop: DIV .

    $default  reduce using rule 36 (mulop)


State 67

   33 term: term mulop . factor

    IDENTIFIER  shift, and go to state 39
    NUMBER      shift, and go to state 40

    $default  reduce using rule 44 (func)

    factor      go to state 84
    arr_access  go to state 44
    func        go to state 45
    var         go to state 46


State 68

   38 factor: func L_PAREN . expression R_PAREN

    IDENTIFIER  shift, and go to state 39
    NUMBER      shift, and go to state 40

    $default  reduce using rule 44 (func)

    expression  go to state 85
    term        go to state 42
    factor      go to state 43
    arr_access  go to state 44
    func        go to state 45
    var         go to state 46


State 69

   23 arr_assn: IDENTIFIER L_BRACKET NUMBER . R_BRACKET EQUALS expression

    R_BRACKET  shift, and go to state 86


State 70

   11 statements: statement SEMICOLON statements .

    $default  reduce using rule 11 (statements)


State 71

   24 s_var: var EQUALS expression .
   29 expression: expression . addop term

    PLUS   shift, and go to state 61
    MINUS  shift, and go to state 62

    $default  reduce using rule 24 (s_var)

    addop  go to state 63


State 72

   17 statement: READ L_PAREN var R_PAREN .

    $default  reduce using rule 17 (statement)


State 73

   18 statement: WRITE L_PAREN expression R_PAREN .

    $default  reduce using rule 18 (statement)


State 74

   57 factor_bool: NUMBER .

    $default  reduce using rule 57 (factor_bool)


State 75

   25 s_if: IF L_PAREN neg expression_bool . R_PAREN L_CURLY statements R_CURLY
   26     | IF L_PAREN neg expression_bool . R_PAREN L_CURLY statements R_CURLY IFELSE neg L_CURLY statements R_CURLY
   27     | IF L_PAREN neg expression_bool . R_PAREN L_CURLY statements R_CURLY ELSE L_CURLY statements R_CURLY
   46 expression_bool: expression_bool . ne_comp term_bool

    LESSTHAN     shift, and go to state 87
    GREATERTHAN  shift, and go to state 88
    ISNOTEQUAL   shift, and go to state 89
    R_PAREN      shift, and go to state 90

    ne_comp  go to state 91


State 76

   47 expression_bool: term_bool .
   51 term_bool: term_bool . e_comp factor_bool

    ISEQUAL  shift, and go to state 92
    GTEQUAL  shift, and go to state 93
    LTEQUAL  shift, and go to state 94

    $default  reduce using rule 47 (expression_bool)

    e_comp  go to state 95


State 77

   52 term_bool: factor_bool .
   56 factor_bool: factor_bool . L_PAREN expression R_PAREN

    L_PAREN  shift, and go to state 96

    $default  reduce using rule 52 (term_bool)


State 78

   58 factor_bool: var .

    $default  reduce using rule 58 (factor_bool)


State 79

   28 s_while: WHILELOOP L_PAREN neg expression_bool . R_PAREN L_CURLY statements R_CURLY
   46 expression_bool: expression_bool . ne_comp term_bool

    LESSTHAN     shift, and go to state 87
    GREATERTHAN  shift, and go to state 88
    ISNOTEQUAL   shift, and go to state 89
    R_PAREN      shift, and go to state 97

    ne_comp  go to state 91


State 80

   22 arr_decl: INTEGER IDENTIFIER L_BRACKET NUMBER . R_BRACKET

    R_BRACKET  shift, and go to state 98


State 81

   43 arr_access: IDENTIFIER L_BRACKET NUMBER . R_BRACKET

    R_BRACKET  shift, and go to state 99


State 82

   41 factor: NUMBER DECIMAL NUMBER .

    $default  reduce using rule 41 (factor)


State 83

   29 expression: expression addop term .
   33 term: term . mulop factor

    MULT  shift, and go to state 64
    MOD   shift, and go to state 65
    DIV   shift, and go to state 66

    $default  reduce using rule 29 (expression)

    mulop  go to state 67


State 84

   33 term: term mulop factor .

    $default  reduce using rule 33 (term)


State 85

   29 expression: expression . addop term
   38 factor: func L_PAREN expression . R_PAREN

    PLUS     shift, and go to state 61
    MINUS    shift, and go to state 62
    R_PAREN  shift, and go to state 100

    addop  go to state 63


State 86

   23 arr_assn: IDENTIFIER L_BRACKET NUMBER R_BRACKET . EQUALS expression

    EQUALS  shift, and go to state 101


State 87

   49 ne_comp: LESSTHAN .

    $default  reduce using rule 49 (ne_comp)


State 88

   50 ne_comp: GREATERTHAN .

    $default  reduce using rule 50 (ne_comp)


State 89

   48 ne_comp: ISNOTEQUAL .

    $default  reduce using rule 48 (ne_comp)


State 90

   25 s_if: IF L_PAREN neg expression_bool R_PAREN . L_CURLY statements R_CURLY
   26     | IF L_PAREN neg expression_bool R_PAREN . L_CURLY statements R_CURLY IFELSE neg L_CURLY statements R_CURLY
   27     | IF L_PAREN neg expression_bool R_PAREN . L_CURLY statements R_CURLY ELSE L_CURLY statements R_CURLY

    L_CURLY  shift, and go to state 102


State 91

   46 expression_bool: expression_bool ne_comp . term_bool

    IDENTIFIER  shift, and go to state 52
    NUMBER      shift, and go to state 74

    term_bool    go to state 103
    factor_bool  go to state 77
    var          go to state 78


State 92

   53 e_comp: ISEQUAL .

    $default  reduce using rule 53 (e_comp)


State 93

   55 e_comp: GTEQUAL .

    $default  reduce using rule 55 (e_comp)


State 94

   54 e_comp: LTEQUAL .

    $default  reduce using rule 54 (e_comp)


State 95

   51 term_bool: term_bool e_comp . factor_bool

    IDENTIFIER  shift, and go to state 52
    NUMBER      shift, and go to state 74

    factor_bool  go to state 104
    var          go to state 78


State 96

   56 factor_bool: factor_bool L_PAREN . expression R_PAREN

    IDENTIFIER  shift, and go to state 39
    NUMBER      shift, and go to state 40

    $default  reduce using rule 44 (func)

    expression  go to state 105
    term        go to state 42
    factor      go to state 43
    arr_access  go to state 44
    func        go to state 45
    var         go to state 46


State 97

   28 s_while: WHILELOOP L_PAREN neg expression_bool R_PAREN . L_CURLY statements R_CURLY

    L_CURLY  shift, and go to state 106


State 98

   22 arr_decl: INTEGER IDENTIFIER L_BRACKET NUMBER R_BRACKET .

    $default  reduce using rule 22 (arr_decl)


State 99

   43 arr_access: IDENTIFIER L_BRACKET NUMBER R_BRACKET .

    $default  reduce using rule 43 (arr_access)


State 100

   38 factor: func L_PAREN expression R_PAREN .

    $default  reduce using rule 38 (factor)


State 101

   23 arr_assn: IDENTIFIER L_BRACKET NUMBER R_BRACKET EQUALS . expression

    IDENTIFIER  shift, and go to state 39
    NUMBER      shift, and go to state 40

    $default  reduce using rule 44 (func)

    expression  go to state 107
    term        go to state 42
    factor      go to state 43
    arr_access  go to state 44
    func        go to state 45
    var         go to state 46


State 102

   25 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY . statements R_CURLY
   26     | IF L_PAREN neg expression_bool R_PAREN L_CURLY . statements R_CURLY IFELSE neg L_CURLY statements R_CURLY
   27     | IF L_PAREN neg expression_bool R_PAREN L_CURLY . statements R_CURLY ELSE L_CURLY statements R_CURLY

    READ        shift, and go to state 17
    WRITE       shift, and go to state 18
    IF          shift, and go to state 19
    WHILELOOP   shift, and go to state 20
    INTEGER     shift, and go to state 21
    RETURN      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23

    $default  reduce using rule 10 (statements)

    statements   go to state 108
    statement_p  go to state 25
    statement    go to state 26
    arr_decl     go to state 27
    arr_assn     go to state 28
    s_var        go to state 29
    s_if         go to state 30
    s_while      go to state 31
    var          go to state 32
    declaration  go to state 33


State 103

   46 expression_bool: expression_bool ne_comp term_bool .
   51 term_bool: term_bool . e_comp factor_bool

    ISEQUAL  shift, and go to state 92
    GTEQUAL  shift, and go to state 93
    LTEQUAL  shift, and go to state 94

    $default  reduce using rule 46 (expression_bool)

    e_comp  go to state 95


State 104

   51 term_bool: term_bool e_comp factor_bool .
   56 factor_bool: factor_bool . L_PAREN expression R_PAREN

    L_PAREN  shift, and go to state 96

    $default  reduce using rule 51 (term_bool)


State 105

   29 expression: expression . addop term
   56 factor_bool: factor_bool L_PAREN expression . R_PAREN

    PLUS     shift, and go to state 61
    MINUS    shift, and go to state 62
    R_PAREN  shift, and go to state 109

    addop  go to state 63


State 106

   28 s_while: WHILELOOP L_PAREN neg expression_bool R_PAREN L_CURLY . statements R_CURLY

    READ        shift, and go to state 17
    WRITE       shift, and go to state 18
    IF          shift, and go to state 19
    WHILELOOP   shift, and go to state 20
    INTEGER     shift, and go to state 21
    RETURN      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23

    $default  reduce using rule 10 (statements)

    statements   go to state 110
    statement_p  go to state 25
    statement    go to state 26
    arr_decl     go to state 27
    arr_assn     go to state 28
    s_var        go to state 29
    s_if         go to state 30
    s_while      go to state 31
    var          go to state 32
    declaration  go to state 33


State 107

   23 arr_assn: IDENTIFIER L_BRACKET NUMBER R_BRACKET EQUALS expression .
   29 expression: expression . addop term

    PLUS   shift, and go to state 61
    MINUS  shift, and go to state 62

    $default  reduce using rule 23 (arr_assn)

    addop  go to state 63


State 108

   25 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY statements . R_CURLY
   26     | IF L_PAREN neg expression_bool R_PAREN L_CURLY statements . R_CURLY IFELSE neg L_CURLY statements R_CURLY
   27     | IF L_PAREN neg expression_bool R_PAREN L_CURLY statements . R_CURLY ELSE L_CURLY statements R_CURLY

    R_CURLY  shift, and go to state 111


State 109

   56 factor_bool: factor_bool L_PAREN expression R_PAREN .

    $default  reduce using rule 56 (factor_bool)


State 110

   28 s_while: WHILELOOP L_PAREN neg expression_bool R_PAREN L_CURLY statements . R_CURLY

    R_CURLY  shift, and go to state 112


State 111

   25 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY .
   26     | IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY . IFELSE neg L_CURLY statements R_CURLY
   27     | IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY . ELSE L_CURLY statements R_CURLY

    IFELSE  shift, and go to state 113
    ELSE    shift, and go to state 114

    $default  reduce using rule 25 (s_if)


State 112

   28 s_while: WHILELOOP L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY .

    $default  reduce using rule 28 (s_while)


State 113

   26 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY IFELSE . neg L_CURLY statements R_CURLY

    NOT  shift, and go to state 55

    $default  reduce using rule 61 (neg)

    neg  go to state 115


State 114

   27 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY ELSE . L_CURLY statements R_CURLY

    L_CURLY  shift, and go to state 116


State 115

   26 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY IFELSE neg . L_CURLY statements R_CURLY

    L_CURLY  shift, and go to state 117


State 116

   27 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY ELSE L_CURLY . statements R_CURLY

    READ        shift, and go to state 17
    WRITE       shift, and go to state 18
    IF          shift, and go to state 19
    WHILELOOP   shift, and go to state 20
    INTEGER     shift, and go to state 21
    RETURN      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23

    $default  reduce using rule 10 (statements)

    statements   go to state 118
    statement_p  go to state 25
    statement    go to state 26
    arr_decl     go to state 27
    arr_assn     go to state 28
    s_var        go to state 29
    s_if         go to state 30
    s_while      go to state 31
    var          go to state 32
    declaration  go to state 33


State 117

   26 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY IFELSE neg L_CURLY . statements R_CURLY

    READ        shift, and go to state 17
    WRITE       shift, and go to state 18
    IF          shift, and go to state 19
    WHILELOOP   shift, and go to state 20
    INTEGER     shift, and go to state 21
    RETURN      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23

    $default  reduce using rule 10 (statements)

    statements   go to state 119
    statement_p  go to state 25
    statement    go to state 26
    arr_decl     go to state 27
    arr_assn     go to state 28
    s_var        go to state 29
    s_if         go to state 30
    s_while      go to state 31
    var          go to state 32
    declaration  go to state 33


State 118

   27 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY ELSE L_CURLY statements . R_CURLY

    R_CURLY  shift, and go to state 120


State 119

   26 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY IFELSE neg L_CURLY statements . R_CURLY

    R_CURLY  shift, and go to state 121


State 120

   27 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY ELSE L_CURLY statements R_CURLY .

    $default  reduce using rule 27 (s_if)


State 121

   26 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY IFELSE neg L_CURLY statements R_CURLY .

    $default  reduce using rule 26 (s_if)
